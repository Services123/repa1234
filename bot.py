#! /usr/bin/env python
# -*- coding: utf-8 -*-
from telegram.ext import CommandHandler, MessageHandler, Filters, Updater,CallbackQueryHandler,RegexHandler,ConversationHandler
import telegram
import os,sys
import requests, json
import datetime
import pymongo


TOKEN = "863685329:AAE28MbIM9GEu60v_J-z3zLu7wUqjcJZZeg"
PORT = int(os.environ.get('PORT', '43760'))

updater = Updater(token=TOKEN)
dispatcher = updater.dispatcher

client = pymongo.MongoClient("mongodb+srv://admin:admin@cluster0-97nom.mongodb.net/test?retryWrites=true")
db = client.get_database('shopbiz123')

kb = [[telegram.KeyboardButton('–ù–∞–ª–∏—á–∏–µ üíä'),telegram.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ')],
	[telegram.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìÑ'),telegram.KeyboardButton('–û–ø–µ—Ä–∞—Ç–æ—Ä üì±')]]

kbMainMarkup = telegram.ReplyKeyboardMarkup(kb, resize_keyboard=True)

def orderForm1(bot, update,user_data):
	if  update.message.text ==u'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
		bot.send_message(chat_id=user.usr_id,text=
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=kbMainMarkup)
		return ConversationHandler.END

	user_data['cost'] = update.message.text
	print('cost is '+update.message.text)
	kb_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
	update.effective_message.reply_text(
		        '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥', reply_markup=kb_markup)
	return 3

def orderForm2(bot, update,user_data):
	if  update.message.text ==u'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
		bot.send_message(chat_id=user.usr_id,text=
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=kbMainMarkup)
		return ConversationHandler.END

	user_data['city'] = update.message.text
	print('city is '+update.message.text)
	kb_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
	update.effective_message.reply_text(
		        '–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω', reply_markup=kb_markup)
	return 4

def orderForm3(bot, update,user_data):
	if  update.message.text ==u'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
		bot.send_message(chat_id=user.usr_id,text=
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=kbMainMarkup)
		return ConversationHandler.END

	user_data['area'] = update.message.text
	print('area is '+update.message.text)
	kb_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
	update.effective_message.reply_text(
		        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–ø–∏—Å–∞–Ω–∏–µ)', reply_markup=kb_markup)
	return 5

def orderForm4(bot, update,user_data):
	if  update.message.text ==u'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
		bot.send_message(chat_id=user.usr_id,text=
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=kbMainMarkup)
		return ConversationHandler.END

	user_data['name'] = update.message.text
	print('name is '+update.message.text)
	kb_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
	update.effective_message.reply_text(
		        '–°–∫–∏–Ω—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–ª–∞–¥–∞', reply_markup=kb_markup)
	return 6

def orderForm5(bot, update,user_data):
	print('asa')
	print('photo')
	if  update.message.text == u'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
		bot.send_message(chat_id=user.usr_id,text=
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=kbMainMarkup)
		return ConversationHandler.END
	user_data['photochat'] = update.message.chat_id
	user_data['photoid'] = update.message.message_id

	insertOrder(user_data['cost'], user_data['city'], user_data['area'],user_data['name'],user_data['photochat'],user_data['photoid'])
	print('asa1')
	kb_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
	update.effective_message.reply_text(
		        '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=kb_markup)
	return ConversationHandler.END


def SendDelOrder(bot,update):
	orders = db.orders.find({'status': True})
	for x in orders:
		bot.send_message(chat_id=update.message.chat_id, text=x['name']+'\n'+x['area'],
			reply_markup=telegram.InlineKeyboardMarkup([[telegram.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å',callback_data=x['order_id']+'$$DEL')]]))

	bot.send_message(chat_id=update.message.chat_id, text = '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã',reply_markup=telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True))

def getStat(bot,update):
	cost = 0
	for x in db.stat.find():
		cost = cost+int(x['cost'])
	clients = str(db.clients.count())

	bot.send_message(chat_id=update.message.chat_id, text = '–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: '+str(db.stat.count())+'\n'+'–°—É–º–º–∞ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: '+str(cost)+'\n'+'–í—Å–µ–≥–æ –ª—é–¥–µ–π –≤ –±–æ—Ç–µ: '+clients+'\n',reply_markup=telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True))


def checkAdmin(bot,update,msg):
	if msg == u'1:–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
		getStat(bot,update)
	elif msg == u'2:–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–¥':
		kb_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
		update.effective_message.reply_text(
		        '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã', reply_markup=kb_markup)
		return True
	elif msg == u'3:–£–¥–∞–ª–∏—Ç—å –∫–ª–∞–¥—ã':
		SendDelOrder(bot,update)
	elif msg == u'4:–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞':
		setAdmin(bot,update)
	elif msg == u'siJwBeApJKVj':
		changeAdmin(bot,update)
	return False


def setAdmin(bot,update):
	kb = [[telegram.KeyboardButton('1:–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')],[telegram.KeyboardButton('2:–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–¥')],
	[telegram.KeyboardButton('3:–£–¥–∞–ª–∏—Ç—å –∫–ª–∞–¥—ã')],[telegram.KeyboardButton('4:–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞')]]
	kb_markup = telegram.ReplyKeyboardMarkup(kb, resize_keyboard=True)

	bot.send_message(chat_id=update.message.chat_id,
					text="–ù–∞–ø–∏—à–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º",
					reply_markup=kb_markup)

	

def changeAdmin(bot,update):
	admin = db.clients.find_one({'admin':True})
	if admin != None:
		db.clients.update({'chat_id':admin['chat_id']}, {'chat_id': admin['chat_id'],'order_id':None,'admin':False}, upsert=True)

	chat_id = update.message.chat_id
	db.clients.update({'chat_id':chat_id}, {'chat_id': chat_id,'order_id':None,'admin':True}, upsert=True)
	kb = [[telegram.KeyboardButton('1:–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')],[telegram.KeyboardButton('2:–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–¥')],
	[telegram.KeyboardButton('3:–£–¥–∞–ª–∏—Ç—å –∫–ª–∞–¥—ã')],[telegram.KeyboardButton('4:–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞')]]
	kb_markup = telegram.ReplyKeyboardMarkup(kb, resize_keyboard=True)
	bot.send_message(chat_id=update.message.chat_id,
					text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:",
					reply_markup=kb_markup)

def admin(bot,update):
	print('adminPanel...')
	kb = [[telegram.KeyboardButton('1:–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')],[telegram.KeyboardButton('2:–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–¥')],
	[telegram.KeyboardButton('3:–£–¥–∞–ª–∏—Ç—å –∫–ª–∞–¥—ã')],[telegram.KeyboardButton('4:–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞')]]
	kb_markup = telegram.ReplyKeyboardMarkup(kb, resize_keyboard=True)
	print(update.message.text)
	utm=update.message.text.split(' ')
	if len(utm)>1:
		if utm[1] == '1@So4Zzcn^oQ':
			bot.send_message(chat_id=update.message.chat_id,
					text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:",
					reply_markup=kb_markup)


def updateClients(chat_id):
	db.clients.update({'chat_id':chat_id}, {'chat_id': chat_id,'order_id':None}, upsert=True)



def callback_alarm(bot, job):
	order_id = getClientOrder(job.context.message.chat_id)
	db.orders.update({'order_id':order_id}, { "$set": { 'status' : True  } } )
	db.clients.update({'chat_id':job.context.message.chat_id}, {'chat_id': job.context.message.chat_id,'order_id':None})
	bot.send_message(chat_id=job.context.message.chat_id, text='–í–∞—à–∞ –±—Ä–æ–Ω—å –Ω–∞ –∫–ª–∞–¥ —Å–Ω—è—Ç–∞!',reply_markup=kbMainMarkup)


def updateClientOrder(chat_id, order_id, job,update):
	print('updatingStatus')
	db.orders.update({'order_id':order_id}, { "$set": { 'status' : False  } } )
	job.run_once(callback_alarm, 43200, context=update) 
	db.clients.update({'chat_id':chat_id}, {'chat_id': chat_id,'order_id':order_id}, upsert=True)

def getClientOrder(chat_id):
	client = db.clients.find_one({'chat_id':int(chat_id)})
	if client == None:
		return None
	return client['order_id']

def getOrderCost(order_id):
	order = db.orders.find_one({'order_id':order_id})
	return order['cost']

def insertOrder(cost, city, area,name,photochat,photoid):
	print('Inserting Oreder')
	order_id = str(datetime.datetime.now())
	db.orders.insert_one({'order_id': order_id,'cost':cost,
			'city':city,'area':area,'name':name,'status': True,'photochat':photochat,'photoid':photoid})

def sendOrderPhoto(bot,order_id,chat_id):

	kb_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
	order = db.orders.find_one({'order_id':order_id})
	try:
		bot.forward_message(chat_id=chat_id, from_chat_id=order['photochat'], message_id=order['photoid'])
		bot.send_message(chat_id=chat_id,text=u'–í–∞—à –∫–ª–∞–¥ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!',reply_markup=kb_markup)
	except Exception as e:
		print(e)
		bot.send_message(chat_id=chat_id,text=u'–ú—ã –ø—Ä–∏—Å–æ–Ω–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @nick —Å–≤–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –≤—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ—Ç–µ —Å–≤–æ–π –∫–ª–∞–¥!',reply_markup=kb_markup)
	db.clients.update({'chat_id':chat_id}, { "$set": { 'order_id' : None  } } )
	db.stat.insert_one({'cost': order['cost']})
	db.orders.remove({'order_id':order_id})


def start(bot,update):
	updateClients(update.message.chat_id)
	kb = [[telegram.KeyboardButton('–ù–∞–ª–∏—á–∏–µ üíä'),telegram.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ')],
	[telegram.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìÑ'),telegram.KeyboardButton('–û–ø–µ—Ä–∞—Ç–æ—Ä üì±')]]
	kb_markup = telegram.ReplyKeyboardMarkup(kb, resize_keyboard=True)
	bot.send_message(chat_id=update.message.chat_id,
					text="–ü—Ä–∏–≤–µ—Ç, —É –Ω–∞—Å —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤—Å—ë üéÅ",
					reply_markup=kb_markup)

def mainMenu(bot, update):
	kb = [[telegram.KeyboardButton('–ù–∞–ª–∏—á–∏–µ üíä'),telegram.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ')],
	[telegram.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìÑ'),telegram.KeyboardButton('–û–ø–µ—Ä–∞—Ç–æ—Ä üì±')]]
	kb_markup = telegram.ReplyKeyboardMarkup(kb, resize_keyboard=True)
	bot.send_message(chat_id=update.message.chat_id,
					text="–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá",
					reply_markup=kb_markup)

def sendingManual(bot,update):
	kb = [[telegram.KeyboardButton('–ù–∞–ª–∏—á–∏–µ üíä'),telegram.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ')],
	[telegram.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìÑ'),telegram.KeyboardButton('–û–ø–µ—Ä–∞—Ç–æ—Ä üì±')]]
	kb_markup = telegram.ReplyKeyboardMarkup(kb, resize_keyboard=True)
	bot.send_message(chat_id=update.message.chat_id,
					text="üëá –ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å: \nüíä –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ù–∞–ª–∏—á–∏–µ\"\nüí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É"+
					"\nüî¢ –í –ø—É–Ω–∫—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\" –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞—Ü–∏–∏\nüéÅ –ù–∞–π—Ç–∏ —Å–≤–æ–π –∫–ª–∞–¥",
					reply_markup=kb_markup)

def sendingOperator(bot,update):
	kb = [[telegram.KeyboardButton('–ù–∞–ª–∏—á–∏–µ üíä'),telegram.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ')],
	[telegram.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìÑ'),telegram.KeyboardButton('–û–ø–µ—Ä–∞—Ç–æ—Ä üì±')]]
	kb_markup = telegram.ReplyKeyboardMarkup(kb, resize_keyboard=True)
	bot.send_message(chat_id=update.message.chat_id,
					text="–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - @nick",
					reply_markup=kb_markup)


def handleMessage(bot, update):
	msg = update.message.text
	if msg == u'–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìÑ':
		sendingManual(bot,update)
	elif msg == u'–û–ø–µ—Ä–∞—Ç–æ—Ä üì±':
		sendingOperator(bot,update)
	elif msg == u'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ':
		cOrder = getClientOrder(update.message.chat_id)
		if cOrder != None:
			kb_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
			update.effective_message.reply_text(
		        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –±–µ–∑ –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=kb_markup)
			return 1
		else:
			bot.send_message(chat_id=update.message.chat_id,
					text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∫—É–ø–∏—Ç—å üòÖ")
	elif msg ==u'–ù–∞–ª–∏—á–∏–µ üíä':
		bot.send_message(chat_id=update.message.chat_id,
					text="üî∏ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ üëá",
					reply_markup=telegram.InlineKeyboardMarkup([[telegram.InlineKeyboardButton(text='üåÜ –•–∞—Ä—å–∫–æ–≤',callback_data='KHCT')]]))
	elif msg == u'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
		mainMenu(bot, update)
	elif msg == u'1:–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
		getStat(bot,update)
	elif msg == u'2:–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–¥':
		kb_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
		update.effective_message.reply_text(
		        '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã', reply_markup=kb_markup)
		return 2
	elif msg == u'3:–£–¥–∞–ª–∏—Ç—å –∫–ª–∞–¥—ã':
		SendDelOrder(bot,update)
	elif msg == u'4:–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞':
		setAdmin(bot,update)
	elif msg == u'siJwBeApJKVj':
		changeAdmin(bot,update)


def sendArea(bot,update):
	areas = db.orders.find()
	buts = None
	if len(list(db.orders.find())) == 0:
		bot.send_message(chat_id=update.message.chat_id,
					text="–ö–ª–∞–¥–æ–≤ –ø–æ –≤–∞—à–µ–º—É –≥–æ—Ä–æ–¥—É –Ω–µ—Ç")
		mainMenu(bot,update)
		return

	for x in areas:
		if buts == None:
			buts = [[telegram.InlineKeyboardButton(text=x['area'],callback_data=x['area']+'$$AREA')]]
		else:
			buts.append([telegram.InlineKeyboardButton(text=x['area'],callback_data=x['area']+'$$AREA')])

	bot.send_message(chat_id=update.message.chat_id,
					text="üî∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω üëá",
					reply_markup=telegram.InlineKeyboardMarkup(buts))

def checkingAreas(bot,update,area):
	print('checkingAreas')
	kb_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
	bot.send_message(chat_id=update.message.chat_id,
					text=u"–í—ã –≤—ã–±—Ä–∞–ª–∏: "+area, reply_markup=kb_markup)


	areas = db.orders.find({'area': area})

	if len(list(areas)) != 0:
		for x in db.orders.find({'area': area}):
			if x['status']:
				try:
					bot.send_message(chat_id=update.message.chat_id,
							text=x['name']+u'\n–¶–µ–Ω–∞: '+str(x['cost']),
							reply_markup=telegram.InlineKeyboardMarkup([[telegram.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å',callback_data=x['order_id']+'$$ORDER')]]))
				except Exception as e:
					print(e)

def checkingOrders(bot,chat_id, order,job_queue,update):
	print('checkingOrders')
	kb_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ')],
		[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
	orders = db.orders.find()
	if len(list(orders)) != 0:
		for x in db.orders.find():
			print('Debug 1')
			if x['order_id'] == order:
				print('Order 1')
				try:
					updateClientOrder(chat_id, order,job_queue,update)
				except Exception as e:
					print(e)
				try:
					bot.send_message(chat_id=chat_id,
							text=u"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É "+str(getOrderCost(order))+u' –Ω–∞ –∫–æ—à–µ–ª–µ–∫ XXX. –ß–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤ –±—Ä–æ–Ω—å –Ω–∞ –∑–∞–∫–∞–∑ –ø—Ä–æ–ø–∞–¥–µ—Ç.',
							reply_markup=kb_markup)
				except Exception as e:
					print(e)
				break


def callbackQueryHandler(bot, update,job_queue):
	kb_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
	cqd = update.callback_query.data
	s = cqd.split('$$')
	if len(s)>1:
		if s[1] == 'YES':
			print('YES')
			sendOrderPhoto(bot,getClientOrder(s[0]),s[0])
		elif s[1] == 'NOT':
			bot.send_message(chat_id=s[0],text='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',reply_markup=kb_markup)
		elif s[1] == 'DEL':
			db.orders.remove({'order_id':s[0]})
			bot.send_message(chat_id=update.callback_query.message.chat_id,text = '–¢–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω',reply_markup=kb_markup)
		elif s[1] == 'ORDER':
			checkingOrders(bot,update.callback_query.message.chat_id,s[0],job_queue,update.callback_query)
		elif s[1] == 'AREA':
			checkingAreas(bot,update.callback_query,s[0])

	if cqd == 'KHCT':
		sendArea(bot,update.callback_query)

	
	

def cancel(bot,update):
	return ConversationHandler.END

def chekingTransaction(bot,update,number):
	admin = db.clients.find_one({'admin':True})
	order_id = getClientOrder(update.message.chat_id)
	if order_id == None:
		return 
	cost = getOrderCost(order_id)
	
	bot.send_message(chat_id=admin['chat_id'],text=u'–í–∞–º –ø—Ä–∏—Ö–æ–¥–∏–ª –ø–ª–∞—Ç–µ–∂ '+ str(number)+u' –Ω–∞ —Å—É–º–º—É '+str(cost),
		reply_markup=telegram.InlineKeyboardMarkup([[telegram.InlineKeyboardButton(text='–î–∞',callback_data=str(update.message.chat_id)+'$$YES')],
			[telegram.InlineKeyboardButton(text='–ù–µ—Ç',callback_data=str(update.message.chat_id)+'$$NOT')]]))


def checkingNumber(bot,update):
	kb = [[telegram.KeyboardButton('–ù–∞–ª–∏—á–∏–µ üíä'),telegram.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ')],
	[telegram.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìÑ'),telegram.KeyboardButton('–û–ø–µ—Ä–∞—Ç–æ—Ä üì±')]]
	kb_markup = telegram.ReplyKeyboardMarkup(kb, resize_keyboard=True)
	back_markup = telegram.ReplyKeyboardMarkup([[telegram.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]], resize_keyboard=True)
	msg = update.message.text
	if msg == u'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
		update.effective_message.reply_text(
	        '–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá', reply_markup=kb_markup)
		return ConversationHandler.END
	elif msg.isdigit():
		update.effective_message.reply_text(
	        '–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. ‚úÖ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç 5 –¥–æ 20 –º–∏–Ω—É—Ç!', reply_markup=back_markup)
		chekingTransaction(bot,update,msg)
	else:
		update.effective_message.reply_text(
	        '–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –±–µ–∑ –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ üëá', reply_markup=back_markup)
		return 1


conv_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.text, handleMessage)],

        states={
            1: [MessageHandler(Filters.text, checkingNumber)],

            2: [MessageHandler(Filters.text, orderForm1, pass_user_data=True)],
            3: [MessageHandler(Filters.text, orderForm2, pass_user_data=True)],
            4: [MessageHandler(Filters.text, orderForm3, pass_user_data=True)],
            5: [MessageHandler(Filters.text, orderForm4, pass_user_data=True)],
            6: [MessageHandler(Filters.photo, orderForm5, pass_user_data=True)],
        },

        fallbacks=[CommandHandler('cancel', cancel)]
    )


dispatcher.add_handler(conv_handler)


dispatcher.add_handler(CallbackQueryHandler(callbackQueryHandler,pass_job_queue=True))
dispatcher.add_handler(CommandHandler('start', start))
dispatcher.add_handler(CommandHandler('admin', admin))
dispatcher.add_handler(MessageHandler(Filters.text, handleMessage))

if __name__ == '__main__':
	#updater.start_polling()
	updater.start_webhook(listen="0.0.0.0", port=PORT, url_path=TOKEN)
	updater.bot.set_webhook("https://shopbizbot.herokuapp.com/" + TOKEN)
	updater.idle()
